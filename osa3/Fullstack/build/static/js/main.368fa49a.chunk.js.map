{"version":3,"sources":["services/persons.js","components/Notification.js","components/Filter.js","components/PersonForm.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","isError","className","Filter","handler","onChange","PersonForm","submit","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","type","Persons","phonebook","persons","showFiltered","deleteContact","map","key","name","number","onClick","App","useState","setPersons","filteredPhonebook","setNewFilteredPhonebook","setNewName","setNewNumber","setShowFiltered","notificationMessage","setNotificationMessage","setIsError","useEffect","personService","initialPersons","event","filter","person","includes","target","preventDefault","window","confirm","personToChange","find","updatedContact","returnedPerson","setTimeout","catch","error","console","log","returnedPersons","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.368fa49a.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteContact }","import React from 'react'\r\n\r\nconst Notification = ({ message, isError }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    if (isError) {\r\n        return (\r\n            <div className=\"error\">\r\n            {message}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"success\">\r\n            {message}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Filter = ({ handler }) => {\r\n    return (\r\n      <form>\r\n        <div>filter shown with: <input onChange={handler}/></div>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  export default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({ submit, newName, handleNameChange, newNumber, handleNumberChange }) => {\r\n    return (\r\n      <form onSubmit={submit}>\r\n          <div>name: <input value={newName} onChange={handleNameChange} /></div>\r\n          <div>number: <input value={newNumber} onChange={handleNumberChange}/></div>\r\n          <div><button type=\"submit\">add</button></div>\r\n      </form>\r\n    )\r\n  }\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({ phonebook, persons, showFiltered, deleteContact }) => {\r\n    //Show the filtered phonebook\r\n    if (showFiltered) {\r\n      return( \r\n        <div>\r\n          {phonebook.map(persons =>\r\n            <div key={persons.name}>\r\n              {persons.name} {persons.number} <button onClick={() => deleteContact(persons.name, persons.id)}>Delete</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )\r\n    } else {\r\n      //Show all contacts\r\n      return (\r\n        <div>\r\n          {persons.map(persons =>\r\n            <div key={persons.id}>\r\n              {persons.name} {persons.number} <button onClick={() => deleteContact(persons.name, persons.id)}>Delete</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Persons","import React, { useEffect, useState } from 'react';\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n\nfunction App() {\n  const [persons, setPersons] = useState([])\n  const [filteredPhonebook, setNewFilteredPhonebook] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [showFiltered, setShowFiltered] = useState(false)\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [isError, setIsError]= useState(null)\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleNewFilterChange = (event) => {\n    const filteredPhonebook = persons.filter(person => person.name.includes(event.target.value))\n    setNewFilteredPhonebook(filteredPhonebook);\n    setShowFiltered(event.target.value)\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n\n    const names = persons.map(person => person.name)\n\n    //Is there already a contact with this name?\n    if (names.includes(newName)) {\n      const result = window.confirm(`${newName} is already added to phonebook, replace old number with a new one?`)\n\n      if (result) {\n        //Replacing old number with new one\n        const personToChange = persons.find(persons => persons.name === newName)\n        const updatedContact = { ...personToChange, number: newNumber}\n\n        personService\n          .update(updatedContact.id, updatedContact)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== updatedContact.id ? person : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n\n            setNotificationMessage(`Updated ${newName}'s phone number to ${updatedContact.number}`)\n            setIsError(false)\n            setTimeout(() => {setNotificationMessage(null)}, 5000)\n          })\n          .catch(error => {\n            console.log(error)\n            //Name removed from server -> remove it from the list\n            //setPersons(persons.filter(n => n.name !== newName))\n\n            setNotificationMessage(`Information of ${newName} has already been removed from server`)\n            setIsError(true)\n          })\n      }\n    } else {\n      //Creating a new contact\n      const personObject = { name: newName, number: newNumber }\n\n      personService\n        .create(personObject)\n        .then(returnedPersons => {\n          setPersons(persons.concat(returnedPersons))\n          setNewName('')\n          setNewNumber('')\n          setNotificationMessage(`Added ${newName}`)\n          setIsError(false)\n          setTimeout(() => {setNotificationMessage(null)}, 5000)\n        })\n        .catch(error => {\n          setNotificationMessage(error.response.data.error)\n          setIsError(true)\n          setTimeout(() => {setNotificationMessage(null)}, 5000)\n          console.log(error.response.data)\n        })\n    }\n  }\n\n  const deleteContact = (name, id) => {\n    const result = window.confirm(`Delete ${name}?`)\n\n    if (result) {\n      personService\n        .deleteContact(id)\n        .then(returnedPersons => {\n          setPersons(persons.filter(person => person.id !== id))\n          setShowFiltered(false)\n          \n          setNotificationMessage(`Removed ${name}`)\n          setIsError(false)\n          setTimeout(() => {setNotificationMessage(null)}, 5000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} isError={isError} />\n      <Filter handler={handleNewFilterChange}/>\n      <h2>Add a new contact</h2>\n      <PersonForm \n        submit={addNewPerson} \n        newName={newName} \n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons phonebook={filteredPhonebook} persons={persons} showFiltered={showFiltered} deleteContact={deleteContact}/>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}